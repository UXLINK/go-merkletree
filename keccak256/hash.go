// Copyright Â© 2019 Weald Technology Trading
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package keccak256

import (
	"bytes"
	"golang.org/x/crypto/sha3"
	"sort"
)

const _hashlength = 32

// HashLength returns the length of hashes generated by Hash() in bytes.
func HashLength() int {
	return _hashlength
}

// Hash generates a Keccak-256 hash from a byte array.
func Hash(data ...[]byte) []byte {
	hash := sha3.NewLegacyKeccak256()

	sort.Slice(data, func(i, j int) bool {
		return bytes.Compare(data[i], data[j]) == -1
	})
	for _, d := range data {
		hash.Write(d)
	}
	return hash.Sum(nil)
}

func HashBranch(data1 string, data2 string) []byte {
	return Hash(Hex2BytesFixed(data1, 32), Hex2BytesFixed(data2, 32))
}

func HashByteBranch(data1 []byte, data2 []byte) []byte {
	return Hash(LeftPadBytes(data1, 32), LeftPadBytes(data2, 32))
}

func HashLeaf(data string) []byte {
	return Hash(Hash(Hex2BytesFixed(data, 32)))
}
